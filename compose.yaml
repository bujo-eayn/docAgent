services:
  # PostgreSQL with pgvector extension (Official Image)
  postgres:
    image: pgvector/pgvector:pg18
    container_name: docAgent-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=docAgent
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - docAgent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend FastAPI service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: docAgent-backend
    volumes:
      - ./data:/app/data
      - ./app:/app/app
      - ./services:/app/services
      - ./config.py:/app/config.py
      - ./models.py:/app/models.py
      - ./migrate_sqlite_to_postgres.py:/app/migrate_sqlite_to_postgres.py
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_URL=http://host.docker.internal:11434
      - MODEL_NAME=gemma3
      - DATA_DIR=/app/data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=docAgent
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - docAgent-network
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend Streamlit service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: docAgent-frontend
    volumes:
      - ./home.py:/app/home.py
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - docAgent-network
    restart: unless-stopped

networks:
  docAgent-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local